Relationships between DATA in mongoDB
  In a real world, in an Appliction there is lots of different entities(Things) that are stored in a Database 
    And this entities are connected to each other 

  In My SQL database
   This entities are represented as tables 
      and these tables are set up oin isolation of one another 
    Then Relationships are model by setting up referencing information from one table in another or by creating NEW Relationships tables
  
  
  In mongoDB
    In mongoDB there is a lot of option for how information can be structured

    One to Few
     In this, DATA is embedded direclty in the document

    One to Many
     In this,  a Reference to a document that is defined in another collection is embedded in the document
       this is ususlly done by using a ObjectID


Mongoose documentation on how to create reference for a document in another document --> https://mongoosejs.com/docs/populate.html 






Important note regarding the upcoming video lecture!

  The potential error that you might get with the newest mongoose version 7 while writing the code in the next video: TypeError: Invalid schema configuration: `false` is not a valid type at path `id`.

  SOLUTION:

   In that next video lecture, toward the last part of the video, in the models/user.js code, we will be implementing the following line of code in the addresses array inside of a mongoose schema named userSchema:

                              _id: {id: false},
   If adding this line makes your app show the error message mentioned above, you might be using the newest mongoose 7 module versions.

   To solve it, modify the mentioned line by adding an underscore _ before the id in the { _id: false } syntax on that line. So, that line should now look like this:

                               _id: {_id: false},
    That should solve any mongoose version 7 errors related to it.

  ANOTHER SOLUTION:

   To avoid compatibility issues with this and to be able to use Colt's exact code from the upcoming video lecture, you can install a mongoose version lower than 7.0.0 by using the following npm command, and then that error shouldn't happen:

   npm install mongoose@"<7.0.0"